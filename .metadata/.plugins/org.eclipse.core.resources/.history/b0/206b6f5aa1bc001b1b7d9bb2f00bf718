	package com.example.demo.data;

	import java.time.LocalDate;

    import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;

	import org.springframework.batch.item.ItemProcessor;

    import com.example.demo.model.Match;

	public class MatchDataProcessor implements ItemProcessor<MatchInput, Match> { //input and output tpe

	  private static final Logger log = LoggerFactory.getLogger(MatchDataProcessor.class);

	  @Override
	  public Match process(final MatchInput matchInput) throws Exception { //process will call each line
	 
		  Match match = new Match();
		  
		  match.setId(Long.parseLong(matchInput.getId()));
		  
		  match.setCity(matchInput.getCity());
		  
		  match.setDate(LocalDate.parse(matchInput.getDate()));
		  
		  match.setPlayerOfMatch(matchInput.getPlayer_of_match());
		  
		  String firstInningsTeam, secondInningsTeam; //depending on the innings order
		  
		  if("bat".equals(matchInput.getToss_decision())){
			  firstInningsTeam  = matchInput.getToss_winner(); 
			  secondInningsTeam = matchInput.getToss_winner().equals(matchInput.getTeam1()) 
					  ? matchInput.getTeam2() : matchInput.getTeam1();
		  } else {
			  secondInningsTeam  = matchInput.getToss_winner();
			  firstInningsTeam = matchInput.getToss_winner().equals(matchInput.getTeam1()) 
					  ? matchInput.getTeam2() : matchInput.getTeam1();
		  }
		  
		  match.setTeam1(firstInningsTeam);
		  
		  match.setTeam2(secondInningsTeam);
		  
		  match.setTossWinner(matchInput.getToss_winner());
		  
		  match.setTossDecision(matchInput.getToss_decision());
		  
		  match.setResult(matchInput.getResult());
		  
		  return match;
		  
		  
	  }

	}
	

